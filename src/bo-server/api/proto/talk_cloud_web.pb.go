// Code generated by protoc-gen-go. DO NOT EDIT.
// source: talk_cloud_web.proto

package talk_cloud

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateAccountReq struct {
	ConfirmPwd           string   `protobuf:"bytes,1,opt,name=ConfirmPwd,proto3" json:"ConfirmPwd,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Pid                  int32    `protobuf:"varint,3,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Username             string   `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	NickName             string   `protobuf:"bytes,5,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Pwd                  string   `protobuf:"bytes,6,opt,name=Pwd,proto3" json:"Pwd,omitempty"`
	Email                string   `protobuf:"bytes,7,opt,name=Email,proto3" json:"Email,omitempty"`
	PrivilegeId          int32    `protobuf:"varint,8,opt,name=PrivilegeId,proto3" json:"PrivilegeId,omitempty"`
	Contact              string   `protobuf:"bytes,9,opt,name=Contact,proto3" json:"Contact,omitempty"`
	RoleId               int32    `protobuf:"varint,10,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	State                string   `protobuf:"bytes,11,opt,name=State,proto3" json:"State,omitempty"`
	LlTime               string   `protobuf:"bytes,12,opt,name=LlTime,proto3" json:"LlTime,omitempty"`
	ChangeTime           string   `protobuf:"bytes,13,opt,name=ChangeTime,proto3" json:"ChangeTime,omitempty"`
	CTime                string   `protobuf:"bytes,14,opt,name=CTime,proto3" json:"CTime,omitempty"`
	Phone                string   `protobuf:"bytes,15,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Remark               string   `protobuf:"bytes,16,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Address              string   `protobuf:"bytes,17,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAccountReq) Reset()         { *m = CreateAccountReq{} }
func (m *CreateAccountReq) String() string { return proto.CompactTextString(m) }
func (*CreateAccountReq) ProtoMessage()    {}
func (*CreateAccountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{0}
}

func (m *CreateAccountReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAccountReq.Unmarshal(m, b)
}
func (m *CreateAccountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAccountReq.Marshal(b, m, deterministic)
}
func (m *CreateAccountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountReq.Merge(m, src)
}
func (m *CreateAccountReq) XXX_Size() int {
	return xxx_messageInfo_CreateAccountReq.Size(m)
}
func (m *CreateAccountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountReq proto.InternalMessageInfo

func (m *CreateAccountReq) GetConfirmPwd() string {
	if m != nil {
		return m.ConfirmPwd
	}
	return ""
}

func (m *CreateAccountReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateAccountReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CreateAccountReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateAccountReq) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *CreateAccountReq) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func (m *CreateAccountReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateAccountReq) GetPrivilegeId() int32 {
	if m != nil {
		return m.PrivilegeId
	}
	return 0
}

func (m *CreateAccountReq) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *CreateAccountReq) GetRoleId() int32 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *CreateAccountReq) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CreateAccountReq) GetLlTime() string {
	if m != nil {
		return m.LlTime
	}
	return ""
}

func (m *CreateAccountReq) GetChangeTime() string {
	if m != nil {
		return m.ChangeTime
	}
	return ""
}

func (m *CreateAccountReq) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *CreateAccountReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CreateAccountReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *CreateAccountReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CreateAccountResp struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAccountResp) Reset()         { *m = CreateAccountResp{} }
func (m *CreateAccountResp) String() string { return proto.CompactTextString(m) }
func (*CreateAccountResp) ProtoMessage()    {}
func (*CreateAccountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{1}
}

func (m *CreateAccountResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAccountResp.Unmarshal(m, b)
}
func (m *CreateAccountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAccountResp.Marshal(b, m, deterministic)
}
func (m *CreateAccountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountResp.Merge(m, src)
}
func (m *CreateAccountResp) XXX_Size() int {
	return xxx_messageInfo_CreateAccountResp.Size(m)
}
func (m *CreateAccountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountResp proto.InternalMessageInfo

func (m *CreateAccountResp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// 转移设备的请求数据
type TransDevices struct {
	// 需要转移的设备
	Imeis []string `protobuf:"bytes,1,rep,name=imeis,proto3" json:"imeis,omitempty"`
	// 接收设备的Id
	ReceiverId int32 `protobuf:"varint,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// 设备原来的Id
	SenderId             int32    `protobuf:"varint,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransDevices) Reset()         { *m = TransDevices{} }
func (m *TransDevices) String() string { return proto.CompactTextString(m) }
func (*TransDevices) ProtoMessage()    {}
func (*TransDevices) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{3}
}

func (m *TransDevices) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransDevices.Unmarshal(m, b)
}
func (m *TransDevices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransDevices.Marshal(b, m, deterministic)
}
func (m *TransDevices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransDevices.Merge(m, src)
}
func (m *TransDevices) XXX_Size() int {
	return xxx_messageInfo_TransDevices.Size(m)
}
func (m *TransDevices) XXX_DiscardUnknown() {
	xxx_messageInfo_TransDevices.DiscardUnknown(m)
}

var xxx_messageInfo_TransDevices proto.InternalMessageInfo

func (m *TransDevices) GetImeis() []string {
	if m != nil {
		return m.Imeis
	}
	return nil
}

func (m *TransDevices) GetReceiverId() int32 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *TransDevices) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

// web创建组请求数据
type WebCreateGroupReq struct {
	DeviceIds            []int32  `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	GroupInfo            *Group   `protobuf:"bytes,2,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebCreateGroupReq) Reset()         { *m = WebCreateGroupReq{} }
func (m *WebCreateGroupReq) String() string { return proto.CompactTextString(m) }
func (*WebCreateGroupReq) ProtoMessage()    {}
func (*WebCreateGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{4}
}

func (m *WebCreateGroupReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebCreateGroupReq.Unmarshal(m, b)
}
func (m *WebCreateGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebCreateGroupReq.Marshal(b, m, deterministic)
}
func (m *WebCreateGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebCreateGroupReq.Merge(m, src)
}
func (m *WebCreateGroupReq) XXX_Size() int {
	return xxx_messageInfo_WebCreateGroupReq.Size(m)
}
func (m *WebCreateGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WebCreateGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_WebCreateGroupReq proto.InternalMessageInfo

func (m *WebCreateGroupReq) GetDeviceIds() []int32 {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

func (m *WebCreateGroupReq) GetGroupInfo() *Group {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

type WebCreateGroupResp struct {
	Gid                  int32    `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebCreateGroupResp) Reset()         { *m = WebCreateGroupResp{} }
func (m *WebCreateGroupResp) String() string { return proto.CompactTextString(m) }
func (*WebCreateGroupResp) ProtoMessage()    {}
func (*WebCreateGroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{5}
}

func (m *WebCreateGroupResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebCreateGroupResp.Unmarshal(m, b)
}
func (m *WebCreateGroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebCreateGroupResp.Marshal(b, m, deterministic)
}
func (m *WebCreateGroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebCreateGroupResp.Merge(m, src)
}
func (m *WebCreateGroupResp) XXX_Size() int {
	return xxx_messageInfo_WebCreateGroupResp.Size(m)
}
func (m *WebCreateGroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WebCreateGroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_WebCreateGroupResp proto.InternalMessageInfo

func (m *WebCreateGroupResp) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

// 获取某个设备某一段时间的经纬度， 需要两个参数：设备id，然后是开始的时间
type GpsForTraceReq struct {
	// 获取轨迹回放数据的设备的Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 获取轨迹回放数据的起始时间戳
	TimesStampStart string `protobuf:"bytes,2,opt,name=timesStampStart,proto3" json:"timesStampStart,omitempty"`
	// 获取轨迹回放数据的结束时间的时间戳
	TimesStampEnd        string   `protobuf:"bytes,3,opt,name=timesStampEnd,proto3" json:"timesStampEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpsForTraceReq) Reset()         { *m = GpsForTraceReq{} }
func (m *GpsForTraceReq) String() string { return proto.CompactTextString(m) }
func (*GpsForTraceReq) ProtoMessage()    {}
func (*GpsForTraceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{6}
}

func (m *GpsForTraceReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpsForTraceReq.Unmarshal(m, b)
}
func (m *GpsForTraceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpsForTraceReq.Marshal(b, m, deterministic)
}
func (m *GpsForTraceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpsForTraceReq.Merge(m, src)
}
func (m *GpsForTraceReq) XXX_Size() int {
	return xxx_messageInfo_GpsForTraceReq.Size(m)
}
func (m *GpsForTraceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GpsForTraceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GpsForTraceReq proto.InternalMessageInfo

func (m *GpsForTraceReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GpsForTraceReq) GetTimesStampStart() string {
	if m != nil {
		return m.TimesStampStart
	}
	return ""
}

func (m *GpsForTraceReq) GetTimesStampEnd() string {
	if m != nil {
		return m.TimesStampEnd
	}
	return ""
}

// 轨迹回放调用返回的数据
type GpsForTraceResp struct {
	// 轨迹回放返回的数据
	TraceData []*TraceInfo `protobuf:"bytes,1,rep,name=traceData,proto3" json:"traceData,omitempty"`
	// 从startTimestamp到endTimestamp之间的数据如果大于limit（暂时定为1000），就为false。
	Whole                bool     `protobuf:"varint,2,opt,name=whole,proto3" json:"whole,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpsForTraceResp) Reset()         { *m = GpsForTraceResp{} }
func (m *GpsForTraceResp) String() string { return proto.CompactTextString(m) }
func (*GpsForTraceResp) ProtoMessage()    {}
func (*GpsForTraceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{7}
}

func (m *GpsForTraceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpsForTraceResp.Unmarshal(m, b)
}
func (m *GpsForTraceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpsForTraceResp.Marshal(b, m, deterministic)
}
func (m *GpsForTraceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpsForTraceResp.Merge(m, src)
}
func (m *GpsForTraceResp) XXX_Size() int {
	return xxx_messageInfo_GpsForTraceResp.Size(m)
}
func (m *GpsForTraceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GpsForTraceResp.DiscardUnknown(m)
}

var xxx_messageInfo_GpsForTraceResp proto.InternalMessageInfo

func (m *GpsForTraceResp) GetTraceData() []*TraceInfo {
	if m != nil {
		return m.TraceData
	}
	return nil
}

func (m *GpsForTraceResp) GetWhole() bool {
	if m != nil {
		return m.Whole
	}
	return false
}

// 轨迹回放单个数据单元的数据结构
type TraceInfo struct {
	// 经度
	Lng string `protobuf:"bytes,1,opt,name=lng,proto3" json:"lng,omitempty"`
	// 纬度
	Lat string `protobuf:"bytes,2,opt,name=lat,proto3" json:"lat,omitempty"`
	// 该数据单元的时间戳
	Timestamp            string   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraceInfo) Reset()         { *m = TraceInfo{} }
func (m *TraceInfo) String() string { return proto.CompactTextString(m) }
func (*TraceInfo) ProtoMessage()    {}
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{8}
}

func (m *TraceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceInfo.Unmarshal(m, b)
}
func (m *TraceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceInfo.Marshal(b, m, deterministic)
}
func (m *TraceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceInfo.Merge(m, src)
}
func (m *TraceInfo) XXX_Size() int {
	return xxx_messageInfo_TraceInfo.Size(m)
}
func (m *TraceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TraceInfo proto.InternalMessageInfo

func (m *TraceInfo) GetLng() string {
	if m != nil {
		return m.Lng
	}
	return ""
}

func (m *TraceInfo) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *TraceInfo) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// 查询设备日志信息请求的信息
type GetDeviceLogInfoReq struct {
	// 要查询日志的设备的Id
	Uid                  int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceLogInfoReq) Reset()         { *m = GetDeviceLogInfoReq{} }
func (m *GetDeviceLogInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceLogInfoReq) ProtoMessage()    {}
func (*GetDeviceLogInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{9}
}

func (m *GetDeviceLogInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceLogInfoReq.Unmarshal(m, b)
}
func (m *GetDeviceLogInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceLogInfoReq.Marshal(b, m, deterministic)
}
func (m *GetDeviceLogInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceLogInfoReq.Merge(m, src)
}
func (m *GetDeviceLogInfoReq) XXX_Size() int {
	return xxx_messageInfo_GetDeviceLogInfoReq.Size(m)
}
func (m *GetDeviceLogInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceLogInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceLogInfoReq proto.InternalMessageInfo

func (m *GetDeviceLogInfoReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 查询设备日志信息返回的数据
type GetDeviceLogInfoResp struct {
	LogUrl               string   `protobuf:"bytes,1,opt,name=logUrl,proto3" json:"logUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceLogInfoResp) Reset()         { *m = GetDeviceLogInfoResp{} }
func (m *GetDeviceLogInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceLogInfoResp) ProtoMessage()    {}
func (*GetDeviceLogInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{10}
}

func (m *GetDeviceLogInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeviceLogInfoResp.Unmarshal(m, b)
}
func (m *GetDeviceLogInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeviceLogInfoResp.Marshal(b, m, deterministic)
}
func (m *GetDeviceLogInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceLogInfoResp.Merge(m, src)
}
func (m *GetDeviceLogInfoResp) XXX_Size() int {
	return xxx_messageInfo_GetDeviceLogInfoResp.Size(m)
}
func (m *GetDeviceLogInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceLogInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceLogInfoResp proto.InternalMessageInfo

func (m *GetDeviceLogInfoResp) GetLogUrl() string {
	if m != nil {
		return m.LogUrl
	}
	return ""
}

// 查询某个调度员名下的wifi信息请求数据
type GetWifiInfoReq struct {
	// 调度员的Id
	AccountId            int32    `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWifiInfoReq) Reset()         { *m = GetWifiInfoReq{} }
func (m *GetWifiInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetWifiInfoReq) ProtoMessage()    {}
func (*GetWifiInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{11}
}

func (m *GetWifiInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWifiInfoReq.Unmarshal(m, b)
}
func (m *GetWifiInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWifiInfoReq.Marshal(b, m, deterministic)
}
func (m *GetWifiInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWifiInfoReq.Merge(m, src)
}
func (m *GetWifiInfoReq) XXX_Size() int {
	return xxx_messageInfo_GetWifiInfoReq.Size(m)
}
func (m *GetWifiInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWifiInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetWifiInfoReq proto.InternalMessageInfo

func (m *GetWifiInfoReq) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// 查询wifi信息返回的数据
type GetWifiInfoResp struct {
	// 查询调度员名下所有的wifi信息
	Wifis                []*Wifi  `protobuf:"bytes,1,rep,name=wifis,proto3" json:"wifis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWifiInfoResp) Reset()         { *m = GetWifiInfoResp{} }
func (m *GetWifiInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetWifiInfoResp) ProtoMessage()    {}
func (*GetWifiInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{12}
}

func (m *GetWifiInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWifiInfoResp.Unmarshal(m, b)
}
func (m *GetWifiInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWifiInfoResp.Marshal(b, m, deterministic)
}
func (m *GetWifiInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWifiInfoResp.Merge(m, src)
}
func (m *GetWifiInfoResp) XXX_Size() int {
	return xxx_messageInfo_GetWifiInfoResp.Size(m)
}
func (m *GetWifiInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWifiInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetWifiInfoResp proto.InternalMessageInfo

func (m *GetWifiInfoResp) GetWifis() []*Wifi {
	if m != nil {
		return m.Wifis
	}
	return nil
}

// 操作wifi信息的请求数据
type WifiInfoReq struct {
	// 需要保存、修改或删除的wifi信息的数据
	Wifis []*Wifi `protobuf:"bytes,1,rep,name=wifis,proto3" json:"wifis,omitempty"`
	// 调用这个方法的目的是对wifi信息数据进行保存、修改或删除作说明。1 保存， 2 修改， 3 删除
	Ops int32 `protobuf:"varint,2,opt,name=ops,proto3" json:"ops,omitempty"`
	// 调度员的id
	AccountId            int32    `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WifiInfoReq) Reset()         { *m = WifiInfoReq{} }
func (m *WifiInfoReq) String() string { return proto.CompactTextString(m) }
func (*WifiInfoReq) ProtoMessage()    {}
func (*WifiInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{13}
}

func (m *WifiInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiInfoReq.Unmarshal(m, b)
}
func (m *WifiInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiInfoReq.Marshal(b, m, deterministic)
}
func (m *WifiInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiInfoReq.Merge(m, src)
}
func (m *WifiInfoReq) XXX_Size() int {
	return xxx_messageInfo_WifiInfoReq.Size(m)
}
func (m *WifiInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_WifiInfoReq proto.InternalMessageInfo

func (m *WifiInfoReq) GetWifis() []*Wifi {
	if m != nil {
		return m.Wifis
	}
	return nil
}

func (m *WifiInfoReq) GetOps() int32 {
	if m != nil {
		return m.Ops
	}
	return 0
}

func (m *WifiInfoReq) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// 操作wifi信息的返回数据
type WifiInfoResp struct {
	Res                  *Result  `protobuf:"bytes,1,opt,name=Res,proto3" json:"Res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WifiInfoResp) Reset()         { *m = WifiInfoResp{} }
func (m *WifiInfoResp) String() string { return proto.CompactTextString(m) }
func (*WifiInfoResp) ProtoMessage()    {}
func (*WifiInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{14}
}

func (m *WifiInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiInfoResp.Unmarshal(m, b)
}
func (m *WifiInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiInfoResp.Marshal(b, m, deterministic)
}
func (m *WifiInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiInfoResp.Merge(m, src)
}
func (m *WifiInfoResp) XXX_Size() int {
	return xxx_messageInfo_WifiInfoResp.Size(m)
}
func (m *WifiInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_WifiInfoResp proto.InternalMessageInfo

func (m *WifiInfoResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 更新群管理员请求
type UpdGManagerReq struct {
	// 群组的Id
	GId int32 `protobuf:"varint,1,opt,name=GId,proto3" json:"GId,omitempty"`
	// 要更改群内的成员的id
	UId []int32 `protobuf:"varint,2,rep,packed,name=UId,proto3" json:"UId,omitempty"`
	// 调度员的id
	AccountId int32 `protobuf:"varint,3,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	// RoleType 只能为1或者2， 2是指定为管理员，1是指定为普通成员
	RoleType             int32    `protobuf:"varint,4,opt,name=RoleType,proto3" json:"RoleType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdGManagerReq) Reset()         { *m = UpdGManagerReq{} }
func (m *UpdGManagerReq) String() string { return proto.CompactTextString(m) }
func (*UpdGManagerReq) ProtoMessage()    {}
func (*UpdGManagerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{15}
}

func (m *UpdGManagerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdGManagerReq.Unmarshal(m, b)
}
func (m *UpdGManagerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdGManagerReq.Marshal(b, m, deterministic)
}
func (m *UpdGManagerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdGManagerReq.Merge(m, src)
}
func (m *UpdGManagerReq) XXX_Size() int {
	return xxx_messageInfo_UpdGManagerReq.Size(m)
}
func (m *UpdGManagerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdGManagerReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdGManagerReq proto.InternalMessageInfo

func (m *UpdGManagerReq) GetGId() int32 {
	if m != nil {
		return m.GId
	}
	return 0
}

func (m *UpdGManagerReq) GetUId() []int32 {
	if m != nil {
		return m.UId
	}
	return nil
}

func (m *UpdGManagerReq) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *UpdGManagerReq) GetRoleType() int32 {
	if m != nil {
		return m.RoleType
	}
	return 0
}

// 更新群管理员返回的数据
type UpdGManagerResp struct {
	// 更新群管理员返回的消息内容
	Res                  *Result  `protobuf:"bytes,1,opt,name=Res,proto3" json:"Res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdGManagerResp) Reset()         { *m = UpdGManagerResp{} }
func (m *UpdGManagerResp) String() string { return proto.CompactTextString(m) }
func (*UpdGManagerResp) ProtoMessage()    {}
func (*UpdGManagerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{16}
}

func (m *UpdGManagerResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdGManagerResp.Unmarshal(m, b)
}
func (m *UpdGManagerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdGManagerResp.Marshal(b, m, deterministic)
}
func (m *UpdGManagerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdGManagerResp.Merge(m, src)
}
func (m *UpdGManagerResp) XXX_Size() int {
	return xxx_messageInfo_UpdGManagerResp.Size(m)
}
func (m *UpdGManagerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdGManagerResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdGManagerResp proto.InternalMessageInfo

func (m *UpdGManagerResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 删除没有设备和下级的节点账户的请求数据
type DeleteAccountReq struct {
	// 要删除账户的id
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountReq) Reset()         { *m = DeleteAccountReq{} }
func (m *DeleteAccountReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountReq) ProtoMessage()    {}
func (*DeleteAccountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{17}
}

func (m *DeleteAccountReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAccountReq.Unmarshal(m, b)
}
func (m *DeleteAccountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAccountReq.Marshal(b, m, deterministic)
}
func (m *DeleteAccountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountReq.Merge(m, src)
}
func (m *DeleteAccountReq) XXX_Size() int {
	return xxx_messageInfo_DeleteAccountReq.Size(m)
}
func (m *DeleteAccountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountReq proto.InternalMessageInfo

func (m *DeleteAccountReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 删除没有设备和下级的节点账户的返回数据
type DeleteAccountResp struct {
	// 删除没有设备和下级的节点账户的处理结果
	Res                  *Result  `protobuf:"bytes,1,opt,name=Res,proto3" json:"Res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountResp) Reset()         { *m = DeleteAccountResp{} }
func (m *DeleteAccountResp) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountResp) ProtoMessage()    {}
func (*DeleteAccountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{18}
}

func (m *DeleteAccountResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAccountResp.Unmarshal(m, b)
}
func (m *DeleteAccountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAccountResp.Marshal(b, m, deterministic)
}
func (m *DeleteAccountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountResp.Merge(m, src)
}
func (m *DeleteAccountResp) XXX_Size() int {
	return xxx_messageInfo_DeleteAccountResp.Size(m)
}
func (m *DeleteAccountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountResp proto.InternalMessageInfo

func (m *DeleteAccountResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// web定时获取该调度员下的设备的位置信息，用于地图展示的请求数据
type DeviceInfosReq struct {
	// 需要获取位置信息的设备的id切片
	DevicesIds           []int32  `protobuf:"varint,1,rep,packed,name=DevicesIds,proto3" json:"DevicesIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfosReq) Reset()         { *m = DeviceInfosReq{} }
func (m *DeviceInfosReq) String() string { return proto.CompactTextString(m) }
func (*DeviceInfosReq) ProtoMessage()    {}
func (*DeviceInfosReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{19}
}

func (m *DeviceInfosReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfosReq.Unmarshal(m, b)
}
func (m *DeviceInfosReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfosReq.Marshal(b, m, deterministic)
}
func (m *DeviceInfosReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfosReq.Merge(m, src)
}
func (m *DeviceInfosReq) XXX_Size() int {
	return xxx_messageInfo_DeviceInfosReq.Size(m)
}
func (m *DeviceInfosReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfosReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfosReq proto.InternalMessageInfo

func (m *DeviceInfosReq) GetDevicesIds() []int32 {
	if m != nil {
		return m.DevicesIds
	}
	return nil
}

// web定时获取该调度员下的设备的位置信息，用于地图展示的返回数据
type DeviceInfosResp struct {
	// 设备信息
	Devices []*DeviceInfo `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// 请求处理结果
	Res                  *Result  `protobuf:"bytes,2,opt,name=Res,proto3" json:"Res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfosResp) Reset()         { *m = DeviceInfosResp{} }
func (m *DeviceInfosResp) String() string { return proto.CompactTextString(m) }
func (*DeviceInfosResp) ProtoMessage()    {}
func (*DeviceInfosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{20}
}

func (m *DeviceInfosResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfosResp.Unmarshal(m, b)
}
func (m *DeviceInfosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfosResp.Marshal(b, m, deterministic)
}
func (m *DeviceInfosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfosResp.Merge(m, src)
}
func (m *DeviceInfosResp) XXX_Size() int {
	return xxx_messageInfo_DeviceInfosResp.Size(m)
}
func (m *DeviceInfosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfosResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfosResp proto.InternalMessageInfo

func (m *DeviceInfosResp) GetDevices() []*DeviceInfo {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *DeviceInfosResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 通过Imei号获取设备Id的请求数据
type ImeiReq struct {
	// 设备的Imei
	Imei                 string   `protobuf:"bytes,1,opt,name=Imei,proto3" json:"Imei,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImeiReq) Reset()         { *m = ImeiReq{} }
func (m *ImeiReq) String() string { return proto.CompactTextString(m) }
func (*ImeiReq) ProtoMessage()    {}
func (*ImeiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{21}
}

func (m *ImeiReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImeiReq.Unmarshal(m, b)
}
func (m *ImeiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImeiReq.Marshal(b, m, deterministic)
}
func (m *ImeiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImeiReq.Merge(m, src)
}
func (m *ImeiReq) XXX_Size() int {
	return xxx_messageInfo_ImeiReq.Size(m)
}
func (m *ImeiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ImeiReq.DiscardUnknown(m)
}

var xxx_messageInfo_ImeiReq proto.InternalMessageInfo

func (m *ImeiReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

// 通过Imei号获取设备Id的返回数据
type ImeiResp struct {
	// 设备Id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 请求处理结果
	Res                  *Result  `protobuf:"bytes,2,opt,name=Res,proto3" json:"Res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImeiResp) Reset()         { *m = ImeiResp{} }
func (m *ImeiResp) String() string { return proto.CompactTextString(m) }
func (*ImeiResp) ProtoMessage()    {}
func (*ImeiResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{22}
}

func (m *ImeiResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImeiResp.Unmarshal(m, b)
}
func (m *ImeiResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImeiResp.Marshal(b, m, deterministic)
}
func (m *ImeiResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImeiResp.Merge(m, src)
}
func (m *ImeiResp) XXX_Size() int {
	return xxx_messageInfo_ImeiResp.Size(m)
}
func (m *ImeiResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ImeiResp.DiscardUnknown(m)
}

var xxx_messageInfo_ImeiResp proto.InternalMessageInfo

func (m *ImeiResp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImeiResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 更新设备信息的请求数据
type UpdDInfoReq struct {
	// 需要更新设备的设备信息
	DeviceInfo           *DeviceUpdate `protobuf:"bytes,1,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdDInfoReq) Reset()         { *m = UpdDInfoReq{} }
func (m *UpdDInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdDInfoReq) ProtoMessage()    {}
func (*UpdDInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{23}
}

func (m *UpdDInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdDInfoReq.Unmarshal(m, b)
}
func (m *UpdDInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdDInfoReq.Marshal(b, m, deterministic)
}
func (m *UpdDInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdDInfoReq.Merge(m, src)
}
func (m *UpdDInfoReq) XXX_Size() int {
	return xxx_messageInfo_UpdDInfoReq.Size(m)
}
func (m *UpdDInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdDInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdDInfoReq proto.InternalMessageInfo

func (m *UpdDInfoReq) GetDeviceInfo() *DeviceUpdate {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

// 更新设备信息的返回数据
type UpdDInfoResp struct {
	// 请求处理的结果
	Res                  *Result  `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdDInfoResp) Reset()         { *m = UpdDInfoResp{} }
func (m *UpdDInfoResp) String() string { return proto.CompactTextString(m) }
func (*UpdDInfoResp) ProtoMessage()    {}
func (*UpdDInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{24}
}

func (m *UpdDInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdDInfoResp.Unmarshal(m, b)
}
func (m *UpdDInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdDInfoResp.Marshal(b, m, deterministic)
}
func (m *UpdDInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdDInfoResp.Merge(m, src)
}
func (m *UpdDInfoResp) XXX_Size() int {
	return xxx_messageInfo_UpdDInfoResp.Size(m)
}
func (m *UpdDInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdDInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdDInfoResp proto.InternalMessageInfo

func (m *UpdDInfoResp) GetRes() *Result {
	if m != nil {
		return m.Res
	}
	return nil
}

// 更新群组成员的请求数据
type UpdateGroupReq struct {
	// 增加群成员的Id
	AddDeviceInfos []int32 `protobuf:"varint,1,rep,packed,name=addDeviceInfos,proto3" json:"addDeviceInfos,omitempty"`
	// 移除群成员的Id
	RemoveDeviceInfos []int32 `protobuf:"varint,2,rep,packed,name=removeDeviceInfos,proto3" json:"removeDeviceInfos,omitempty"`
	// 操作当前群组的群组信息
	GroupInfo            *Group   `protobuf:"bytes,3,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGroupReq) Reset()         { *m = UpdateGroupReq{} }
func (m *UpdateGroupReq) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupReq) ProtoMessage()    {}
func (*UpdateGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{25}
}

func (m *UpdateGroupReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGroupReq.Unmarshal(m, b)
}
func (m *UpdateGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGroupReq.Marshal(b, m, deterministic)
}
func (m *UpdateGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupReq.Merge(m, src)
}
func (m *UpdateGroupReq) XXX_Size() int {
	return xxx_messageInfo_UpdateGroupReq.Size(m)
}
func (m *UpdateGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupReq proto.InternalMessageInfo

func (m *UpdateGroupReq) GetAddDeviceInfos() []int32 {
	if m != nil {
		return m.AddDeviceInfos
	}
	return nil
}

func (m *UpdateGroupReq) GetRemoveDeviceInfos() []int32 {
	if m != nil {
		return m.RemoveDeviceInfos
	}
	return nil
}

func (m *UpdateGroupReq) GetGroupInfo() *Group {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

// 更新群组成员的请求数据
type UpdateGroupResp struct {
	// 请求处理结果
	ResultMsg            *Result  `protobuf:"bytes,1,opt,name=resultMsg,proto3" json:"resultMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGroupResp) Reset()         { *m = UpdateGroupResp{} }
func (m *UpdateGroupResp) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupResp) ProtoMessage()    {}
func (*UpdateGroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{26}
}

func (m *UpdateGroupResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGroupResp.Unmarshal(m, b)
}
func (m *UpdateGroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGroupResp.Marshal(b, m, deterministic)
}
func (m *UpdateGroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupResp.Merge(m, src)
}
func (m *UpdateGroupResp) XXX_Size() int {
	return xxx_messageInfo_UpdateGroupResp.Size(m)
}
func (m *UpdateGroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupResp proto.InternalMessageInfo

func (m *UpdateGroupResp) GetResultMsg() *Result {
	if m != nil {
		return m.ResultMsg
	}
	return nil
}

// 删除群组的返回数据
type DeleteGroupResp struct {
	// 请求处理结果
	ResultMsg            *Result  `protobuf:"bytes,1,opt,name=resultMsg,proto3" json:"resultMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteGroupResp) Reset()         { *m = DeleteGroupResp{} }
func (m *DeleteGroupResp) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupResp) ProtoMessage()    {}
func (*DeleteGroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{27}
}

func (m *DeleteGroupResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteGroupResp.Unmarshal(m, b)
}
func (m *DeleteGroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteGroupResp.Marshal(b, m, deterministic)
}
func (m *DeleteGroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGroupResp.Merge(m, src)
}
func (m *DeleteGroupResp) XXX_Size() int {
	return xxx_messageInfo_DeleteGroupResp.Size(m)
}
func (m *DeleteGroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGroupResp proto.InternalMessageInfo

func (m *DeleteGroupResp) GetResultMsg() *Result {
	if m != nil {
		return m.ResultMsg
	}
	return nil
}

// 导入设备的请求数据
type ImportDeviceReq struct {
	// 超级管理员的Id // 其实默认是1
	AccountId int32 `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// 要导入的设备信息
	Devices              []*DeviceInfo `protobuf:"bytes,2,rep,name=Devices,proto3" json:"Devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImportDeviceReq) Reset()         { *m = ImportDeviceReq{} }
func (m *ImportDeviceReq) String() string { return proto.CompactTextString(m) }
func (*ImportDeviceReq) ProtoMessage()    {}
func (*ImportDeviceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{28}
}

func (m *ImportDeviceReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportDeviceReq.Unmarshal(m, b)
}
func (m *ImportDeviceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportDeviceReq.Marshal(b, m, deterministic)
}
func (m *ImportDeviceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportDeviceReq.Merge(m, src)
}
func (m *ImportDeviceReq) XXX_Size() int {
	return xxx_messageInfo_ImportDeviceReq.Size(m)
}
func (m *ImportDeviceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportDeviceReq.DiscardUnknown(m)
}

var xxx_messageInfo_ImportDeviceReq proto.InternalMessageInfo

func (m *ImportDeviceReq) GetAccountId() int32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ImportDeviceReq) GetDevices() []*DeviceInfo {
	if m != nil {
		return m.Devices
	}
	return nil
}

// 导入设备返回的数据
type ImportDeviceResp struct {
	// 请求处理结果
	Result               *Result  `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportDeviceResp) Reset()         { *m = ImportDeviceResp{} }
func (m *ImportDeviceResp) String() string { return proto.CompactTextString(m) }
func (*ImportDeviceResp) ProtoMessage()    {}
func (*ImportDeviceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{29}
}

func (m *ImportDeviceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportDeviceResp.Unmarshal(m, b)
}
func (m *ImportDeviceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportDeviceResp.Marshal(b, m, deterministic)
}
func (m *ImportDeviceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportDeviceResp.Merge(m, src)
}
func (m *ImportDeviceResp) XXX_Size() int {
	return xxx_messageInfo_ImportDeviceResp.Size(m)
}
func (m *ImportDeviceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportDeviceResp.DiscardUnknown(m)
}

var xxx_messageInfo_ImportDeviceResp proto.InternalMessageInfo

func (m *ImportDeviceResp) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

// 更新设备的请求数据
type DeviceUpdate struct {
	// 设备Id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 设备Imei号
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	// 设备昵称
	NickName string `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	// 调度员或者经销商Id
	LoginId int32 `protobuf:"varint,4,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
	// 创建时间
	CreateTime string `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 最后一次登录的时间
	LlTime string `protobuf:"bytes,7,opt,name=ll_time,json=llTime,proto3" json:"ll_time,omitempty"`
	// 修改设备的时间
	ChangeTime string `protobuf:"bytes,8,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// GPS的上传时间
	LocalTime uint64 `protobuf:"varint,9,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	// 设备型号
	DeviceType string `protobuf:"bytes,12,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// 设备激活时间
	ActiveTime string `protobuf:"bytes,13,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	// 设备销售时间
	SaleTime string `protobuf:"bytes,14,opt,name=sale_time,json=saleTime,proto3" json:"sale_time,omitempty"`
	// 是否开启日志
	StartLog             string   `protobuf:"bytes,15,opt,name=start_log,json=startLog,proto3" json:"start_log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceUpdate) Reset()         { *m = DeviceUpdate{} }
func (m *DeviceUpdate) String() string { return proto.CompactTextString(m) }
func (*DeviceUpdate) ProtoMessage()    {}
func (*DeviceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bee75d1763415d2b, []int{30}
}

func (m *DeviceUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUpdate.Unmarshal(m, b)
}
func (m *DeviceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUpdate.Marshal(b, m, deterministic)
}
func (m *DeviceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUpdate.Merge(m, src)
}
func (m *DeviceUpdate) XXX_Size() int {
	return xxx_messageInfo_DeviceUpdate.Size(m)
}
func (m *DeviceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUpdate proto.InternalMessageInfo

func (m *DeviceUpdate) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeviceUpdate) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *DeviceUpdate) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *DeviceUpdate) GetLoginId() int32 {
	if m != nil {
		return m.LoginId
	}
	return 0
}

func (m *DeviceUpdate) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *DeviceUpdate) GetLlTime() string {
	if m != nil {
		return m.LlTime
	}
	return ""
}

func (m *DeviceUpdate) GetChangeTime() string {
	if m != nil {
		return m.ChangeTime
	}
	return ""
}

func (m *DeviceUpdate) GetLocalTime() uint64 {
	if m != nil {
		return m.LocalTime
	}
	return 0
}

func (m *DeviceUpdate) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *DeviceUpdate) GetActiveTime() string {
	if m != nil {
		return m.ActiveTime
	}
	return ""
}

func (m *DeviceUpdate) GetSaleTime() string {
	if m != nil {
		return m.SaleTime
	}
	return ""
}

func (m *DeviceUpdate) GetStartLog() string {
	if m != nil {
		return m.StartLog
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateAccountReq)(nil), "talk_cloud.CreateAccountReq")
	proto.RegisterType((*CreateAccountResp)(nil), "talk_cloud.CreateAccountResp")
	proto.RegisterType((*Empty)(nil), "talk_cloud.Empty")
	proto.RegisterType((*TransDevices)(nil), "talk_cloud.TransDevices")
	proto.RegisterType((*WebCreateGroupReq)(nil), "talk_cloud.WebCreateGroupReq")
	proto.RegisterType((*WebCreateGroupResp)(nil), "talk_cloud.WebCreateGroupResp")
	proto.RegisterType((*GpsForTraceReq)(nil), "talk_cloud.GpsForTraceReq")
	proto.RegisterType((*GpsForTraceResp)(nil), "talk_cloud.GpsForTraceResp")
	proto.RegisterType((*TraceInfo)(nil), "talk_cloud.TraceInfo")
	proto.RegisterType((*GetDeviceLogInfoReq)(nil), "talk_cloud.GetDeviceLogInfoReq")
	proto.RegisterType((*GetDeviceLogInfoResp)(nil), "talk_cloud.GetDeviceLogInfoResp")
	proto.RegisterType((*GetWifiInfoReq)(nil), "talk_cloud.GetWifiInfoReq")
	proto.RegisterType((*GetWifiInfoResp)(nil), "talk_cloud.GetWifiInfoResp")
	proto.RegisterType((*WifiInfoReq)(nil), "talk_cloud.WifiInfoReq")
	proto.RegisterType((*WifiInfoResp)(nil), "talk_cloud.WifiInfoResp")
	proto.RegisterType((*UpdGManagerReq)(nil), "talk_cloud.UpdGManagerReq")
	proto.RegisterType((*UpdGManagerResp)(nil), "talk_cloud.UpdGManagerResp")
	proto.RegisterType((*DeleteAccountReq)(nil), "talk_cloud.DeleteAccountReq")
	proto.RegisterType((*DeleteAccountResp)(nil), "talk_cloud.DeleteAccountResp")
	proto.RegisterType((*DeviceInfosReq)(nil), "talk_cloud.DeviceInfosReq")
	proto.RegisterType((*DeviceInfosResp)(nil), "talk_cloud.DeviceInfosResp")
	proto.RegisterType((*ImeiReq)(nil), "talk_cloud.ImeiReq")
	proto.RegisterType((*ImeiResp)(nil), "talk_cloud.ImeiResp")
	proto.RegisterType((*UpdDInfoReq)(nil), "talk_cloud.UpdDInfoReq")
	proto.RegisterType((*UpdDInfoResp)(nil), "talk_cloud.UpdDInfoResp")
	proto.RegisterType((*UpdateGroupReq)(nil), "talk_cloud.UpdateGroupReq")
	proto.RegisterType((*UpdateGroupResp)(nil), "talk_cloud.UpdateGroupResp")
	proto.RegisterType((*DeleteGroupResp)(nil), "talk_cloud.DeleteGroupResp")
	proto.RegisterType((*ImportDeviceReq)(nil), "talk_cloud.ImportDeviceReq")
	proto.RegisterType((*ImportDeviceResp)(nil), "talk_cloud.ImportDeviceResp")
	proto.RegisterType((*DeviceUpdate)(nil), "talk_cloud.DeviceUpdate")
}

func init() { proto.RegisterFile("talk_cloud_web.proto", fileDescriptor_bee75d1763415d2b) }

var fileDescriptor_bee75d1763415d2b = []byte{
	// 1469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x6f, 0x6f, 0xdb, 0x36,
	0x13, 0x77, 0xfe, 0xda, 0x3a, 0x27, 0x8e, 0xc3, 0xa6, 0xad, 0x1e, 0x37, 0x79, 0x1a, 0xf0, 0x29,
	0xfa, 0x14, 0xc3, 0x90, 0x05, 0xe9, 0x80, 0xad, 0x6f, 0x8a, 0xa5, 0x4e, 0xe7, 0x1a, 0x6b, 0xb2,
	0x4c, 0x49, 0x90, 0x37, 0x03, 0x0c, 0xc5, 0x62, 0x5c, 0x22, 0xb2, 0xa4, 0x4a, 0x72, 0x82, 0x7e,
	0x92, 0x7d, 0x91, 0x7d, 0xa0, 0x7d, 0x88, 0x7d, 0x80, 0xe1, 0x8e, 0x94, 0x45, 0xca, 0x49, 0x1a,
	0x60, 0xef, 0xc8, 0xbb, 0xe3, 0xdd, 0x8f, 0xc7, 0xe3, 0xf1, 0x27, 0xc1, 0x46, 0xee, 0x87, 0x57,
	0x83, 0x61, 0x18, 0x4f, 0x82, 0xc1, 0x8d, 0xb8, 0xd8, 0x49, 0xd2, 0x38, 0x8f, 0x19, 0x94, 0xd2,
	0xce, 0x13, 0xc3, 0x62, 0x1c, 0x07, 0x22, 0x54, 0x36, 0xfc, 0xcf, 0x05, 0x68, 0x77, 0x53, 0xe1,
	0xe7, 0x62, 0x7f, 0x38, 0x8c, 0x27, 0x51, 0xee, 0x89, 0xcf, 0xec, 0xbf, 0x00, 0xdd, 0x38, 0xba,
	0x94, 0xe9, 0xf8, 0xf8, 0x26, 0x70, 0xe7, 0xb6, 0xe7, 0x5e, 0x39, 0x9e, 0x21, 0x61, 0x2d, 0x98,
	0xef, 0x07, 0xee, 0xfc, 0xf6, 0xdc, 0xab, 0x25, 0x6f, 0xbe, 0x1f, 0xb0, 0x36, 0x2c, 0x1c, 0xcb,
	0xc0, 0x5d, 0x20, 0x01, 0x0e, 0x59, 0x07, 0x1a, 0x67, 0x99, 0x48, 0x23, 0x7f, 0x2c, 0xdc, 0x45,
	0x5a, 0x3f, 0x9d, 0xa3, 0xee, 0x48, 0x0e, 0xaf, 0x8e, 0x50, 0xb7, 0xa4, 0x74, 0xc5, 0x9c, 0x3c,
	0xdd, 0x04, 0xee, 0x32, 0x89, 0x71, 0xc8, 0x36, 0x60, 0xe9, 0xfd, 0xd8, 0x97, 0xa1, 0x5b, 0x27,
	0x99, 0x9a, 0xb0, 0x6d, 0x68, 0x1e, 0xa7, 0xf2, 0x5a, 0x86, 0x62, 0x24, 0xfa, 0x81, 0xdb, 0xa0,
	0xc8, 0xa6, 0x88, 0xb9, 0x50, 0xef, 0xc6, 0x51, 0xee, 0x0f, 0x73, 0xd7, 0xa1, 0x95, 0xc5, 0x94,
	0x3d, 0x81, 0x65, 0x2f, 0x0e, 0x71, 0x19, 0xd0, 0x32, 0x3d, 0xc3, 0x48, 0x27, 0xb9, 0x9f, 0x0b,
	0xb7, 0xa9, 0x22, 0xd1, 0x04, 0xad, 0x3f, 0x86, 0xa7, 0x72, 0x2c, 0xdc, 0x15, 0x12, 0xeb, 0x19,
	0xe5, 0xe8, 0x93, 0x1f, 0x8d, 0x04, 0xe9, 0x56, 0x75, 0x8e, 0xa6, 0x12, 0xf4, 0xd6, 0x25, 0x55,
	0x4b, 0x79, 0xeb, 0x16, 0xd2, 0xe3, 0x4f, 0x71, 0x24, 0xdc, 0x35, 0x25, 0xa5, 0x09, 0x21, 0x12,
	0x63, 0x3f, 0xbd, 0x72, 0xdb, 0x2a, 0x86, 0x9a, 0xe1, 0x1e, 0xf6, 0x83, 0x20, 0x15, 0x59, 0xe6,
	0xae, 0xab, 0x3d, 0xe8, 0x29, 0xff, 0x1f, 0xac, 0x57, 0x4e, 0x2d, 0x4b, 0xf0, 0x58, 0xa4, 0x3a,
	0xae, 0x25, 0x6f, 0x5e, 0x06, 0xbc, 0x8e, 0xa9, 0x4b, 0xf2, 0x2f, 0xfc, 0x02, 0x56, 0x4e, 0x53,
	0x3f, 0xca, 0x0e, 0xc4, 0xb5, 0x1c, 0x8a, 0x0c, 0x51, 0xc8, 0xb1, 0x90, 0x99, 0x3b, 0xb7, 0xbd,
	0x80, 0x28, 0x68, 0xc2, 0x9e, 0x43, 0x33, 0x15, 0x43, 0x21, 0xaf, 0x45, 0x3a, 0x90, 0xc5, 0xf1,
	0x42, 0x21, 0xea, 0x07, 0xec, 0x19, 0x38, 0x99, 0x88, 0x02, 0xa5, 0x56, 0x87, 0xdd, 0x50, 0x82,
	0x7e, 0xc0, 0x03, 0x58, 0x3f, 0x17, 0x17, 0x0a, 0x54, 0x2f, 0x8d, 0x27, 0x09, 0x16, 0xd2, 0x16,
	0x40, 0x40, 0x31, 0x07, 0x32, 0x50, 0xd1, 0x96, 0x3c, 0x47, 0x49, 0xfa, 0x41, 0xc6, 0x76, 0x01,
	0x46, 0x68, 0x3a, 0x90, 0xd1, 0x65, 0x4c, 0x01, 0x9b, 0x7b, 0xeb, 0x3b, 0x65, 0xa5, 0xee, 0x28,
	0x47, 0x0e, 0x19, 0xf5, 0xa3, 0xcb, 0x98, 0xbf, 0x04, 0x56, 0x8d, 0x92, 0x25, 0x58, 0x35, 0xa3,
	0xe9, 0xce, 0x71, 0xc8, 0x13, 0x68, 0xf5, 0x92, 0xec, 0xe7, 0x38, 0x3d, 0x4d, 0xfd, 0xa1, 0x40,
	0x28, 0x65, 0x72, 0x1c, 0x4c, 0x0e, 0x7b, 0x05, 0x6b, 0xb9, 0x1c, 0x8b, 0xec, 0x24, 0xf7, 0xc7,
	0xc9, 0x49, 0xee, 0xa7, 0x39, 0x01, 0x70, 0xbc, 0xaa, 0x98, 0xbd, 0x80, 0xd5, 0x52, 0xf4, 0x3e,
	0x52, 0x5b, 0x77, 0x3c, 0x5b, 0xc8, 0x7f, 0x87, 0x35, 0x2b, 0x62, 0x96, 0xb0, 0xd7, 0xe0, 0xe4,
	0x38, 0x39, 0xf0, 0x73, 0x9f, 0x36, 0xdf, 0xdc, 0x7b, 0x6c, 0xee, 0x8e, 0x2c, 0x71, 0x5b, 0x5e,
	0x69, 0x87, 0x67, 0x73, 0xf3, 0x29, 0x0e, 0x05, 0xa1, 0x69, 0x78, 0x6a, 0xc2, 0x0f, 0xc1, 0x99,
	0x5a, 0xe3, 0x76, 0xc3, 0x68, 0xa4, 0xf7, 0x82, 0x43, 0x92, 0xf8, 0xc5, 0x06, 0x70, 0xc8, 0x36,
	0xc1, 0x21, 0x7c, 0x08, 0x4f, 0x03, 0x2e, 0x05, 0xfc, 0xff, 0xf0, 0xa8, 0x27, 0x72, 0x55, 0x0e,
	0x1f, 0xe3, 0x11, 0x61, 0x10, 0x9f, 0xd1, 0xcd, 0xa4, 0xcc, 0xe3, 0x44, 0x06, 0x7c, 0x07, 0x36,
	0x66, 0x0d, 0xb3, 0x04, 0x2b, 0x36, 0x8c, 0x47, 0x67, 0x69, 0xa8, 0x51, 0xe8, 0x19, 0xdf, 0x81,
	0x56, 0x4f, 0xe4, 0xe7, 0xf2, 0x52, 0x16, 0x3e, 0x37, 0xc1, 0xf1, 0x55, 0x8d, 0xf6, 0x0b, 0xcf,
	0xa5, 0x80, 0xbf, 0x81, 0x35, 0xcb, 0x3e, 0x4b, 0xd8, 0x4b, 0x58, 0xba, 0x91, 0x97, 0xba, 0x38,
	0x9b, 0x7b, 0x6d, 0x33, 0x63, 0x68, 0xe8, 0x29, 0x35, 0x17, 0xd0, 0x34, 0xe3, 0x3c, 0x70, 0x19,
	0xee, 0x31, 0x4e, 0x32, 0x5d, 0xdd, 0x38, 0xb4, 0x11, 0x2e, 0x54, 0x11, 0x7e, 0x0f, 0x2b, 0x16,
	0xbc, 0x17, 0xb0, 0xe0, 0x89, 0x8c, 0x76, 0xd2, 0xdc, 0x63, 0x66, 0x14, 0x4f, 0x64, 0x93, 0x30,
	0xf7, 0x50, 0xcd, 0x23, 0x68, 0x9d, 0x25, 0x41, 0xef, 0xd0, 0x8f, 0xfc, 0x91, 0x48, 0x75, 0x6e,
	0x7b, 0xd3, 0x0c, 0xe0, 0x10, 0x25, 0x67, 0xd4, 0x46, 0xf1, 0x56, 0xe0, 0x10, 0x91, 0xec, 0x57,
	0x91, 0x4c, 0x05, 0xd8, 0x37, 0xb1, 0x53, 0x9d, 0x7e, 0x49, 0x54, 0x4f, 0x5d, 0xf2, 0xa6, 0x73,
	0xfe, 0x03, 0xac, 0x59, 0xf1, 0x1e, 0x0c, 0x94, 0x43, 0xfb, 0x40, 0x84, 0xc2, 0x6a, 0xff, 0xd5,
	0x3e, 0xf2, 0x06, 0xd6, 0x2b, 0x36, 0x0f, 0x76, 0xbf, 0x0b, 0x2d, 0x55, 0x3c, 0x98, 0xbf, 0x4c,
	0xbf, 0x2d, 0xba, 0x0d, 0xf5, 0xa7, 0x2d, 0xc1, 0x90, 0x70, 0x09, 0x6b, 0xd6, 0x8a, 0x2c, 0x61,
	0xbb, 0x50, 0xd7, 0x06, 0xfa, 0x70, 0x9f, 0x98, 0xe1, 0x4a, 0x6b, 0xaf, 0x30, 0x2b, 0xc0, 0xcd,
	0xdf, 0x0f, 0x6e, 0x0b, 0xea, 0xfd, 0xb1, 0x90, 0x88, 0x8a, 0xc1, 0x22, 0x0e, 0x75, 0x35, 0xd3,
	0x98, 0xff, 0x04, 0x0d, 0xa5, 0x9e, 0x6d, 0xad, 0x0f, 0x0c, 0xd0, 0x83, 0xe6, 0x59, 0x12, 0x1c,
	0x14, 0x25, 0xfa, 0x63, 0xd1, 0x0d, 0x51, 0xa0, 0x33, 0xe7, 0xce, 0x6e, 0xe5, 0x2c, 0x09, 0xfc,
	0x5c, 0x78, 0x86, 0x2d, 0x16, 0x61, 0xe9, 0x48, 0x25, 0x3f, 0xbd, 0x3f, 0xf9, 0xa9, 0xc8, 0xf8,
	0x1f, 0x73, 0x54, 0x85, 0x66, 0x43, 0x7e, 0x09, 0x2d, 0x3f, 0x08, 0x8c, 0x04, 0xeb, 0x13, 0xa8,
	0x48, 0xd9, 0xb7, 0xb0, 0x9e, 0x8a, 0x71, 0x7c, 0x2d, 0x4c, 0x53, 0x55, 0xa9, 0xb3, 0x0a, 0xf6,
	0x1d, 0x94, 0x2d, 0x9a, 0xea, 0xf6, 0x6b, 0x6d, 0xbc, 0x4b, 0xe5, 0x6a, 0xf5, 0xf0, 0x5d, 0x70,
	0x52, 0xc2, 0x7e, 0x98, 0x8d, 0xee, 0xd9, 0x58, 0x69, 0x84, 0x4e, 0x54, 0x59, 0xfe, 0x1b, 0x27,
	0x3e, 0xac, 0xf5, 0xc7, 0x49, 0x9c, 0xea, 0x1e, 0xf7, 0xd5, 0x8e, 0x65, 0x16, 0xe3, 0xfc, 0x83,
	0x8a, 0x91, 0xbf, 0x85, 0xb6, 0x1d, 0x22, 0x4b, 0xd8, 0x37, 0xb0, 0xac, 0x30, 0xdc, 0x83, 0x52,
	0x5b, 0xf0, 0xbf, 0xe6, 0x61, 0xc5, 0xac, 0x8c, 0x99, 0x62, 0x64, 0xb0, 0x88, 0x2f, 0xb8, 0x6e,
	0xff, 0x34, 0xc6, 0xb7, 0x3a, 0x92, 0xc3, 0xab, 0x01, 0x31, 0x30, 0xd5, 0xff, 0x1b, 0x51, 0xc1,
	0xb2, 0xfe, 0x03, 0x8d, 0x30, 0x1e, 0xc9, 0x08, 0xdf, 0x71, 0xd5, 0x49, 0xea, 0x34, 0xef, 0x07,
	0x48, 0x02, 0x86, 0xf4, 0xba, 0x0e, 0xf0, 0xb5, 0xd0, 0x44, 0x0c, 0x94, 0x88, 0x18, 0xcc, 0x53,
	0xa8, 0x87, 0xa1, 0x52, 0xd6, 0x75, 0xeb, 0x57, 0x84, 0x08, 0x57, 0x12, 0xfd, 0x51, 0xca, 0x86,
	0x5e, 0x59, 0x32, 0xa2, 0x2d, 0x80, 0x30, 0x1e, 0xfa, 0x7a, 0x31, 0x92, 0xb2, 0x45, 0xcf, 0x21,
	0x49, 0xb1, 0x5e, 0x73, 0x85, 0x1c, 0x3b, 0x9c, 0x62, 0x5b, 0xfa, 0x12, 0x60, 0x8f, 0x43, 0x03,
	0x7f, 0x98, 0xcb, 0x6b, 0x1d, 0x40, 0x53, 0x2e, 0x25, 0x22, 0x0f, 0xc8, 0x4f, 0xfc, 0x50, 0xab,
	0x15, 0xed, 0x6a, 0xa0, 0x60, 0xaa, 0xc4, 0xe7, 0x7c, 0x10, 0xc6, 0x23, 0xcd, 0xbe, 0x1a, 0x24,
	0xf8, 0x18, 0x8f, 0xf6, 0xfe, 0x76, 0x00, 0xce, 0xc5, 0xc5, 0x89, 0x48, 0x31, 0x1a, 0xfb, 0x00,
	0x2d, 0x9b, 0x65, 0xb0, 0x2d, 0xeb, 0x39, 0xa9, 0xf2, 0x9c, 0xce, 0xe3, 0x99, 0x6a, 0xa7, 0x32,
	0xaf, 0xb1, 0x0f, 0xd4, 0x01, 0xa6, 0x6e, 0x3a, 0xa6, 0x9d, 0x7d, 0x35, 0x3b, 0xcf, 0xee, 0xd4,
	0x65, 0x09, 0xaf, 0xb1, 0xb7, 0xd6, 0x95, 0x21, 0x1e, 0x70, 0x7b, 0xd4, 0xce, 0x2d, 0xb5, 0xc4,
	0x6b, 0x6c, 0x1f, 0x9a, 0xc6, 0x6d, 0x61, 0x4f, 0x67, 0xd6, 0x1e, 0x88, 0x10, 0x61, 0xdc, 0xae,
	0x20, 0x08, 0xbf, 0x01, 0x33, 0x0b, 0xf9, 0xdd, 0x17, 0x2f, 0x8e, 0x73, 0x66, 0xe1, 0xae, 0xdc,
	0xa5, 0xce, 0xe6, 0xdd, 0x4a, 0x72, 0xd9, 0x83, 0xb6, 0xda, 0x55, 0x79, 0x71, 0x6c, 0x68, 0x46,
	0xff, 0xec, 0xb8, 0xb7, 0x2b, 0xc8, 0xd1, 0x3e, 0xb0, 0x13, 0x11, 0x8a, 0xe1, 0x14, 0x1b, 0xb6,
	0x6e, 0xf6, 0xc8, 0x0e, 0x4f, 0xbd, 0xbe, 0xb3, 0x31, 0x2b, 0x24, 0x17, 0xbf, 0x10, 0x77, 0x29,
	0x9e, 0x22, 0x44, 0xd2, 0xb9, 0xfd, 0x6a, 0x67, 0x33, 0xc7, 0x55, 0x79, 0xb1, 0x78, 0x8d, 0x1d,
	0xc1, 0xaa, 0xf5, 0x66, 0xb2, 0x4d, 0xdb, 0xde, 0x7e, 0x72, 0x3b, 0x5b, 0xf7, 0x68, 0xc9, 0xdf,
	0xaf, 0xc0, 0x8c, 0xe3, 0xd7, 0xef, 0xfc, 0x4c, 0x3d, 0x19, 0x84, 0x63, 0xa6, 0x9e, 0x4c, 0x72,
	0xc0, 0x6b, 0xac, 0x0b, 0x2b, 0xc7, 0x71, 0x36, 0xa5, 0x5e, 0x76, 0xd6, 0x0d, 0x62, 0x65, 0x67,
	0xdd, 0xa4, 0x42, 0xaa, 0xbc, 0x0d, 0xfa, 0x66, 0xc3, 0xb1, 0x79, 0xa0, 0x0d, 0xa7, 0xc2, 0xf9,
	0x78, 0x8d, 0x9d, 0x43, 0xbb, 0x4a, 0x34, 0xd9, 0xf3, 0xca, 0x92, 0x2a, 0x5f, 0xed, 0x6c, 0xdf,
	0x6f, 0x60, 0x9c, 0xaa, 0x41, 0xcd, 0x2b, 0x28, 0xad, 0xaf, 0x84, 0x0a, 0x4a, 0x9b, 0xcf, 0xf3,
	0x1a, 0x7b, 0x07, 0xed, 0xc3, 0x49, 0x98, 0x4b, 0xe3, 0x6b, 0x8a, 0xb9, 0x15, 0x4a, 0x3f, 0xfd,
	0xcc, 0xba, 0xe3, 0x22, 0xbe, 0x81, 0x96, 0xfa, 0x4c, 0x3c, 0x78, 0xf7, 0x3e, 0x1a, 0xc9, 0x48,
	0x30, 0xeb, 0xad, 0xa4, 0x2f, 0xb6, 0x3b, 0x96, 0x1e, 0xc1, 0xaa, 0xf5, 0xd5, 0x67, 0x17, 0x55,
	0xf5, 0x33, 0xde, 0x2e, 0xaa, 0x99, 0xcf, 0x45, 0x5e, 0xbb, 0x58, 0xa6, 0x7f, 0x00, 0xaf, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x1e, 0xc5, 0x6b, 0x3f, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebServiceClient interface {
	WebCreateGroup(ctx context.Context, in *WebCreateGroupReq, opts ...grpc.CallOption) (*GroupInfo, error)
	// 更新群成员
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	// 更新群组信息
	UpdateGroupInfo(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Result, error)
	// 删除群组
	DeleteGroup(ctx context.Context, in *GroupDelReq, opts ...grpc.CallOption) (*GroupDelRsp, error)
	// 超级管理员导入设备
	ImportDeviceByRoot(ctx context.Context, in *ImportDeviceReq, opts ...grpc.CallOption) (*ImportDeviceResp, error)
	// 更新设备信息
	UpdateDeviceInfo(ctx context.Context, in *UpdDInfoReq, opts ...grpc.CallOption) (*UpdDInfoResp, error)
	// 通过IMEI号获取id，用于查重
	SelectDeviceByImei(ctx context.Context, in *ImeiReq, opts ...grpc.CallOption) (*ImeiResp, error)
	// 获取设备位置等信息
	GetDevicesInfo(ctx context.Context, in *DeviceInfosReq, opts ...grpc.CallOption) (*DeviceInfosResp, error)
	// 删除没有设备的节点账户
	DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountResp, error)
	// 更改群管理员
	UpdateGroupManager(ctx context.Context, in *UpdGManagerReq, opts ...grpc.CallOption) (*UpdGManagerResp, error)
	// 保存wifi信息, 增加、删除wifi
	PostWifiInfo(ctx context.Context, in *WifiInfoReq, opts ...grpc.CallOption) (*WifiInfoResp, error)
	// 查询wifi信息
	GetWifiInfo(ctx context.Context, in *GetWifiInfoReq, opts ...grpc.CallOption) (*GetWifiInfoResp, error)
	// 查询日志信息
	GetDeviceLogInfo(ctx context.Context, in *GetDeviceLogInfoReq, opts ...grpc.CallOption) (*GetDeviceLogInfoResp, error)
	// 获取某个设备某一段时间的经纬度
	GetGpsForTrace(ctx context.Context, in *GpsForTraceReq, opts ...grpc.CallOption) (*GpsForTraceResp, error)
	// 批量转移设备
	MultiTransDevice(ctx context.Context, in *TransDevices, opts ...grpc.CallOption) (*Result, error)
	// 更改数据库连接
	ChangeDBEngine(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error)
	// 创建下级用户
	CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error)
}

type webServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebServiceClient(cc *grpc.ClientConn) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) WebCreateGroup(ctx context.Context, in *WebCreateGroupReq, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/WebCreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateGroupInfo(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/UpdateGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DeleteGroup(ctx context.Context, in *GroupDelReq, opts ...grpc.CallOption) (*GroupDelRsp, error) {
	out := new(GroupDelRsp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ImportDeviceByRoot(ctx context.Context, in *ImportDeviceReq, opts ...grpc.CallOption) (*ImportDeviceResp, error) {
	out := new(ImportDeviceResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/ImportDeviceByRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateDeviceInfo(ctx context.Context, in *UpdDInfoReq, opts ...grpc.CallOption) (*UpdDInfoResp, error) {
	out := new(UpdDInfoResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/UpdateDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) SelectDeviceByImei(ctx context.Context, in *ImeiReq, opts ...grpc.CallOption) (*ImeiResp, error) {
	out := new(ImeiResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/SelectDeviceByImei", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetDevicesInfo(ctx context.Context, in *DeviceInfosReq, opts ...grpc.CallOption) (*DeviceInfosResp, error) {
	out := new(DeviceInfosResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/GetDevicesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountResp, error) {
	out := new(DeleteAccountResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateGroupManager(ctx context.Context, in *UpdGManagerReq, opts ...grpc.CallOption) (*UpdGManagerResp, error) {
	out := new(UpdGManagerResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/UpdateGroupManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) PostWifiInfo(ctx context.Context, in *WifiInfoReq, opts ...grpc.CallOption) (*WifiInfoResp, error) {
	out := new(WifiInfoResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/PostWifiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetWifiInfo(ctx context.Context, in *GetWifiInfoReq, opts ...grpc.CallOption) (*GetWifiInfoResp, error) {
	out := new(GetWifiInfoResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/GetWifiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetDeviceLogInfo(ctx context.Context, in *GetDeviceLogInfoReq, opts ...grpc.CallOption) (*GetDeviceLogInfoResp, error) {
	out := new(GetDeviceLogInfoResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/GetDeviceLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetGpsForTrace(ctx context.Context, in *GpsForTraceReq, opts ...grpc.CallOption) (*GpsForTraceResp, error) {
	out := new(GpsForTraceResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/GetGpsForTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) MultiTransDevice(ctx context.Context, in *TransDevices, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/MultiTransDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ChangeDBEngine(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/ChangeDBEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) CreateAccount(ctx context.Context, in *CreateAccountReq, opts ...grpc.CallOption) (*CreateAccountResp, error) {
	out := new(CreateAccountResp)
	err := c.cc.Invoke(ctx, "/talk_cloud.WebService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServiceServer is the server API for WebService service.
type WebServiceServer interface {
	WebCreateGroup(context.Context, *WebCreateGroupReq) (*GroupInfo, error)
	// 更新群成员
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	// 更新群组信息
	UpdateGroupInfo(context.Context, *GroupInfo) (*Result, error)
	// 删除群组
	DeleteGroup(context.Context, *GroupDelReq) (*GroupDelRsp, error)
	// 超级管理员导入设备
	ImportDeviceByRoot(context.Context, *ImportDeviceReq) (*ImportDeviceResp, error)
	// 更新设备信息
	UpdateDeviceInfo(context.Context, *UpdDInfoReq) (*UpdDInfoResp, error)
	// 通过IMEI号获取id，用于查重
	SelectDeviceByImei(context.Context, *ImeiReq) (*ImeiResp, error)
	// 获取设备位置等信息
	GetDevicesInfo(context.Context, *DeviceInfosReq) (*DeviceInfosResp, error)
	// 删除没有设备的节点账户
	DeleteAccount(context.Context, *DeleteAccountReq) (*DeleteAccountResp, error)
	// 更改群管理员
	UpdateGroupManager(context.Context, *UpdGManagerReq) (*UpdGManagerResp, error)
	// 保存wifi信息, 增加、删除wifi
	PostWifiInfo(context.Context, *WifiInfoReq) (*WifiInfoResp, error)
	// 查询wifi信息
	GetWifiInfo(context.Context, *GetWifiInfoReq) (*GetWifiInfoResp, error)
	// 查询日志信息
	GetDeviceLogInfo(context.Context, *GetDeviceLogInfoReq) (*GetDeviceLogInfoResp, error)
	// 获取某个设备某一段时间的经纬度
	GetGpsForTrace(context.Context, *GpsForTraceReq) (*GpsForTraceResp, error)
	// 批量转移设备
	MultiTransDevice(context.Context, *TransDevices) (*Result, error)
	// 更改数据库连接
	ChangeDBEngine(context.Context, *Empty) (*Result, error)
	// 创建下级用户
	CreateAccount(context.Context, *CreateAccountReq) (*CreateAccountResp, error)
}

// UnimplementedWebServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWebServiceServer struct {
}

func (*UnimplementedWebServiceServer) WebCreateGroup(ctx context.Context, req *WebCreateGroupReq) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebCreateGroup not implemented")
}
func (*UnimplementedWebServiceServer) UpdateGroup(ctx context.Context, req *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedWebServiceServer) UpdateGroupInfo(ctx context.Context, req *GroupInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (*UnimplementedWebServiceServer) DeleteGroup(ctx context.Context, req *GroupDelReq) (*GroupDelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedWebServiceServer) ImportDeviceByRoot(ctx context.Context, req *ImportDeviceReq) (*ImportDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDeviceByRoot not implemented")
}
func (*UnimplementedWebServiceServer) UpdateDeviceInfo(ctx context.Context, req *UpdDInfoReq) (*UpdDInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceInfo not implemented")
}
func (*UnimplementedWebServiceServer) SelectDeviceByImei(ctx context.Context, req *ImeiReq) (*ImeiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDeviceByImei not implemented")
}
func (*UnimplementedWebServiceServer) GetDevicesInfo(ctx context.Context, req *DeviceInfosReq) (*DeviceInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesInfo not implemented")
}
func (*UnimplementedWebServiceServer) DeleteAccount(ctx context.Context, req *DeleteAccountReq) (*DeleteAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedWebServiceServer) UpdateGroupManager(ctx context.Context, req *UpdGManagerReq) (*UpdGManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupManager not implemented")
}
func (*UnimplementedWebServiceServer) PostWifiInfo(ctx context.Context, req *WifiInfoReq) (*WifiInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostWifiInfo not implemented")
}
func (*UnimplementedWebServiceServer) GetWifiInfo(ctx context.Context, req *GetWifiInfoReq) (*GetWifiInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWifiInfo not implemented")
}
func (*UnimplementedWebServiceServer) GetDeviceLogInfo(ctx context.Context, req *GetDeviceLogInfoReq) (*GetDeviceLogInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceLogInfo not implemented")
}
func (*UnimplementedWebServiceServer) GetGpsForTrace(ctx context.Context, req *GpsForTraceReq) (*GpsForTraceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpsForTrace not implemented")
}
func (*UnimplementedWebServiceServer) MultiTransDevice(ctx context.Context, req *TransDevices) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiTransDevice not implemented")
}
func (*UnimplementedWebServiceServer) ChangeDBEngine(ctx context.Context, req *Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDBEngine not implemented")
}
func (*UnimplementedWebServiceServer) CreateAccount(ctx context.Context, req *CreateAccountReq) (*CreateAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}

func RegisterWebServiceServer(s *grpc.Server, srv WebServiceServer) {
	s.RegisterService(&_WebService_serviceDesc, srv)
}

func _WebService_WebCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebCreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).WebCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/WebCreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).WebCreateGroup(ctx, req.(*WebCreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/UpdateGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateGroupInfo(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DeleteGroup(ctx, req.(*GroupDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ImportDeviceByRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ImportDeviceByRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/ImportDeviceByRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ImportDeviceByRoot(ctx, req.(*ImportDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdDInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/UpdateDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateDeviceInfo(ctx, req.(*UpdDInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_SelectDeviceByImei_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImeiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).SelectDeviceByImei(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/SelectDeviceByImei",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).SelectDeviceByImei(ctx, req.(*ImeiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetDevicesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetDevicesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/GetDevicesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetDevicesInfo(ctx, req.(*DeviceInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DeleteAccount(ctx, req.(*DeleteAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateGroupManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdGManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateGroupManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/UpdateGroupManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateGroupManager(ctx, req.(*UpdGManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_PostWifiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).PostWifiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/PostWifiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).PostWifiInfo(ctx, req.(*WifiInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetWifiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWifiInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetWifiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/GetWifiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetWifiInfo(ctx, req.(*GetWifiInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetDeviceLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceLogInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetDeviceLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/GetDeviceLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetDeviceLogInfo(ctx, req.(*GetDeviceLogInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetGpsForTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GpsForTraceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetGpsForTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/GetGpsForTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetGpsForTrace(ctx, req.(*GpsForTraceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_MultiTransDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransDevices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).MultiTransDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/MultiTransDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).MultiTransDevice(ctx, req.(*TransDevices))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ChangeDBEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ChangeDBEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/ChangeDBEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ChangeDBEngine(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_cloud.WebService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).CreateAccount(ctx, req.(*CreateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "talk_cloud.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebCreateGroup",
			Handler:    _WebService_WebCreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _WebService_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _WebService_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _WebService_DeleteGroup_Handler,
		},
		{
			MethodName: "ImportDeviceByRoot",
			Handler:    _WebService_ImportDeviceByRoot_Handler,
		},
		{
			MethodName: "UpdateDeviceInfo",
			Handler:    _WebService_UpdateDeviceInfo_Handler,
		},
		{
			MethodName: "SelectDeviceByImei",
			Handler:    _WebService_SelectDeviceByImei_Handler,
		},
		{
			MethodName: "GetDevicesInfo",
			Handler:    _WebService_GetDevicesInfo_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _WebService_DeleteAccount_Handler,
		},
		{
			MethodName: "UpdateGroupManager",
			Handler:    _WebService_UpdateGroupManager_Handler,
		},
		{
			MethodName: "PostWifiInfo",
			Handler:    _WebService_PostWifiInfo_Handler,
		},
		{
			MethodName: "GetWifiInfo",
			Handler:    _WebService_GetWifiInfo_Handler,
		},
		{
			MethodName: "GetDeviceLogInfo",
			Handler:    _WebService_GetDeviceLogInfo_Handler,
		},
		{
			MethodName: "GetGpsForTrace",
			Handler:    _WebService_GetGpsForTrace_Handler,
		},
		{
			MethodName: "MultiTransDevice",
			Handler:    _WebService_MultiTransDevice_Handler,
		},
		{
			MethodName: "ChangeDBEngine",
			Handler:    _WebService_ChangeDBEngine_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _WebService_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "talk_cloud_web.proto",
}
