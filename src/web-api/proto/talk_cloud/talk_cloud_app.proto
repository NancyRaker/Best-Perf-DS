syntax = "proto3";

package talk_cloud;

import "talk_cloud_model.proto";
import "talk_cloud_location.proto";

service TalkCloud {
    // app注册普通用户
    rpc AppRegister (AppRegReq) returns (AppRegRsp) {
    }

    // 注册对讲机 /***暂时用不到***/
    rpc DeviceRegister (DeviceRegReq) returns (DeviceRegRsp) {
    }

    // App用户登录
    rpc Login (LoginReq) returns (LoginRsp) {
    }

    // App用户退出
    rpc Logout (LogoutReq) returns (LogoutRsp) {
    }

    // 设置锁定组（默认所在组）
    rpc SetLockGroupId (SetLockGroupIdReq) returns (SetLockGroupIdResp) {
    }

    // web端推送文件类型im数据
    rpc ImMessagePublish (ImMsgReqData) returns (ImMsgRespData) {
    }

    // IM离线数据、心跳、Im消息，根据请求消息的类型，返回对应类型的数据
    rpc DataPublish (stream StreamRequest) returns (stream StreamResponse) {
    }

    // App用户增加好友
    rpc AddFriend (FriendNewReq) returns (FriendNewRsp) {
    }

    // App用户删除好友  /***暂时用不到***/
    rpc DelFriend (FriendDelReq) returns (FriendDelRsp) {
    }

    // 获取好友列表
    rpc GetFriendList (FriendsReq) returns (FriendsRsp) {
    }

    // 通过关键字直接查找数据库里的用户
    rpc SearchUserByKey (UserSearchReq) returns (UserSearchRsp) {
    }

    // 创建组
    rpc CreateGroup (CreateGroupReq) returns (GroupInfo) {
    }

    // 某个App用户添加进组
    rpc JoinGroup (GrpUserAddReq) returns (GrpUserAddRsp) {
    }

    // 移除某个组成员
    rpc RemoveGrpUser (GrpUserDelReq) returns (GrpUserDelRsp) {
    }

    // 退出某个组  /***暂时没有用到***/
    rpc ExitGrp (UserExitReq) returns (UserExitRsp) {
    }

    // 移除某个组
    rpc RemoveGrp (GroupDelReq) returns (GroupDelRsp) {
    }

    // 获取群组列表
    rpc GetGroupList (GrpListReq) returns (GroupListRsp) {
    }

    // 通过关键字，获取群组
    rpc SearchGroup (GrpSearchReq) returns (GroupListRsp) {
    }

    // 邀请其他人进群
    rpc InviteUserIntoGroup (InviteUserReq) returns (InviteUserResp) {
    };

    // App单独获取某个群组信息以及群成员等信息
    rpc GetGroupInfo (GetGroupInfoReq) returns (GetGroupInfoResp) {
    };

    // 暂时借用im简单调用去推送sos报警
    rpc ImSosPublish (ReportDataReq) returns (ImMsgRespData) {
    }

    // app获取apk
    rpc GetApkInfo (apkInfoReq) returns (apkInfoResp) {
    }

    // 获取janus、grpc服务ip和地址 TODO
    rpc GetServerAddr (ServerAddrReq) returns (ServerAddrRsp) {
    }
}

//
message ServerAddrReq {
    string name = 1; // 用户名
}

message ServerAddrRsp {
    string addr = 1; // 形如127.0.0.1:9000
}

/*************** Register ***************/
// App注册用户请求
message AppRegReq {
    string name = 1;
    string password = 2;
}

// App注册用户响应
message AppRegRsp {
    int32 id = 1;
    string userName = 2;
    Result res = 3;
}

// Device注册请求
message DeviceRegReq {
    int32 account_id = 1; // 管理账户ID
    string device_list = 2; // IMEI列表
}

// Device注册响应
message DeviceRegRsp {
    Result res = 1;
}

// 登录请求
message LoginReq {
    string name = 1;
    string passwd = 2;
    // app 登录的grpc im服务地址
    string grpc_server = 3;
    // app 版本 主要是方便向下兼容
    string app_version = 4;
    // 大多数升级过的jw10设备需要携带的版本号
    int32 app_version_code = 5;
    // 对讲机硬件版本号
    string firmware_name = 6;
}

// 登录返回的数据（群组列表，好友列表等）
message LoginRsp {
    Member userInfo = 1;
    repeated FriendRecord friend_list = 2;
    repeated GroupInfo group_list = 3;
    Result res = 4;
    string session_id = 5;
    string updateUri = 6;
}

// 获取Im数据或者发送im数据的内容消息定义
message ImMsgReqData {
    // 用户uid 发送者
    int32 id = 1;

    // 发送者名字
    string SenderName = 2;

    // 1 发送个单独某个人，2 是发给群组里面
    int32 ReceiverType = 3;

    // 接受者的id，群组就是群组id
    int32 ReceiverId = 4;

    // 资源文件路径，app端发送文字信息，就把文字内容放在这里
    string ResourcePath = 5;

    // im消息类型 	1 普通文本   2 图片  3  音频文件  4 视频文件  5 PDF文件 // 无屏幕对讲机使用了6作为sos 7作为cancel sos
    int32 MsgType = 6;

    // 接收者名字
    string ReceiverName = 7;

    // 消息发送时间
    string SendTime = 8;

    //  /***暂时用不到***/
    string msgCode = 9;
}

// 上传文件之后返回给web api的相应
message ImMsgRespData {
    Result result = 1;
    string msgCode = 2;
}

// 退出请求
message LogoutReq {
    string name = 1;
}

message LogoutRsp {
    Result res = 1;
}

// 设置群组锁定请求
message SetLockGroupIdReq {
    int32 uId = 1;
    int32 gId = 2;
}
// 设置群组锁定响应
message SetLockGroupIdResp {
    Result Res = 1;
}

message StreamRequest {
    // 用户id
    int32 uid = 1;

    // 1  初次登录返回的数据。比如用户列表，群组列表，该用户的个人信息   /***数值为1这个消息暂时用不到***/
    // 2  用户离线时的IM数据
    // 3  APP和web通过httpClient上传的文件信息、在线时通信的im数据
    // 4  用户登录后，每隔interval秒向stream发送一个消息，测试能不能连通，不能连通就认为该用户下线
    int32 dataType = 2;

    // 暂时用不到，因为login暂时保持原来的接口
    string name = 3;
    string passwd = 4;

    // 用不到，文件上传不走这里，文件上传是通过http client
    UploadFileData FileDataReq = 5;

    // app发送文字类型im数据的时候使用
    ImMsgReqData imMsg = 6;

    DeviceInfo device_info = 7; // 心跳的时候携带一下设备的一些状态，比如电量
}

// 用不到，文件上传不走这里，文件上传是通过http client
message UploadFileData {
    int32 id = 1; // 谁发的，是单独，还是发给群组
    int32 sendType = 2;
    int32 ReceiverId = 3; // 接受者的id，群组就是群组id
}

// 这个也暂时用不到，app发送im文字信息不走这里，app不方便使用双向流，于是im的文字信息也没有使用stream模式的rpc
message ImReceiver {
    int32 type = 1; // 1 是发送给群组， 2是发送给个人
    GroupInfo groupInfo = 2;
    Member userInfo = 3;
}


message StreamResponse {
    int32 uid = 1;

    // 1  初次登录返回的数据。比如用户列表，群组列表，该用户的个人信息
    // 2  用户离线时的IM数据
    // 3  APP和web通过httpClient上传的文件信息、在线时通信的im数据
    // 4  用户登录后，每隔interval秒向stream发送一个消息，发送内容为keepalive
    int32 DataType = 2;

    // 初次登录类型的请求消息，应该返回的数据，但是目前login还是保持原来的接口，这个就暂时用不到
    FirstLoginData loginResp = 3;

    // 即时im消息，具体消息类型，在ImMsgReqData里面已经注释
    ImMsgReqData imMsgData = 4;

    // im离线消息
    OfflineImMsgResp offlineImMsgResp = 5;

    // TODO 收到app client来的心跳消息之后是否返回一个消息
    KeepAlive keepAlive = 6;

    // 用户离线，推送给其他在一个组的在线用户更新状态 // SOS
    LoginOrLogoutNotify Notify = 7;

    // 通知的人数
    int32 notifyTotal = 8;

    // 发送消息类型的请求结果
    Result res = 9;

    // APP切换房间通知web
    JanusChangeGroupNotify janus_change_group_notify = 10;

    // 通话质量的消息
    TalkQualityMsg qualityMsg = 11;
}
// 通话质量的消息
message TalkQualityMsg {
    // 消息来源那个设备的id
    int32 user_id = 1;
    // 消息来源那个设备那时候的状态
    int32 user_status = 2;
    // 通话质量
    int32 in_link_quality = 3;
    // 通话质量
    int32 in_media_link_quality = 4;
    // 通话质量
    int32 out_link_quality = 5;
    // 通话质量
    int32 out_media_link_quality = 6;
    // 通话质量参数
    int32 rtt = 7;
}


message JanusChangeGroupNotify {
    int32 old_group_id = 1;
    int32 new_group_id = 2;
}

// 用户上线提醒和他有关的消息 用户下线提醒和他有关的消息
message LoginOrLogoutNotify {
    // 用户自己的信息
    DeviceInfo userInfo = 1;

    // 用户自己的定位信息
    GPSHttpResp gpsResp = 2;

    // 和用户相关的群组的信息（包含群里有多少人，哪些人在线等）
    repeated GroupInfo group_list = 3;

    // 如果是临时组,通知app的临时组信息
    GroupInfo groupInfo = 4;
}

// 登录之后返回的im离线消息
message OfflineImMsgResp {
    // 单聊的离线消息
    repeated OfflineImMsg offlineSingleImMsgs = 1;

    // 群聊的离线消息
    repeated OfflineImMsg offlineGroupImMsgs = 2;

    // 群聊的ptt离线消息
    repeated OfflineImMsg offlineGroupPttImMsgs = 3;
}

// 离线消息model
message OfflineImMsg {
    int32 SenderId = 1;
    int32 GroupId = 2;
    string Name = 3;
    int32 MsgReceiverType = 4;
    repeated ImMsgReqData imMsgData = 5;
}

// 用不到，没有用这个stream中的返回消息
message FirstLoginData {
    Member userInfo = 1;
    repeated FriendRecord friend_list = 2;
    repeated GroupInfo group_list = 3;
}

// 客户端往stream发送的心跳消息 目前也不用，直接在最外层的消息体里的消息类型声明是4就可以
message KeepAlive {
    int32 uid = 1;
    int32 Ack = 2;
}

/************** User_Friend *************/
// 新加好友
message FriendNewReq {
    // 账户id
    int32 uid = 1;

    // 要加的好友id
    int32 fuid = 2;
}

// 添加好友的返回
message FriendNewRsp {
    Result res = 1;
}

message FriendDelReq {
    int32 uid = 1;
    int32 fuid = 2;
    int32 timestamp = 3;
}

message FriendDelRsp {
    Result err = 1;
}

message FriendsReq {
    int32 uid = 1;
}

message FriendRecord {
    int32 uid = 1;
    string name = 2;
    int64 imei = 3;
}

message FriendsRsp {
    int32 uid = 1;
    repeated FriendRecord friend_list = 2;
    Result res = 3;
}

// 模糊搜索好友
message UserSearchReq {
    int32 uid = 1;
    string target = 2;
}


message UserSearchRsp {
    Result res = 1;
    repeated DeviceInfo user_list = 2;

}
/**************** Group *****************/
// 创建群组
message CreateGroupReq {
    repeated int32 device_ids = 1;
    Group group_info = 2;
}

message CreateGroupResp {
    int32 gid = 1;
}

// 加入某个群组
message GrpUserAddReq {
    int32 uid = 1;
    int32 gid = 2;
    int32 timestamp = 3;
}

message GrpUserAddRsp {
    Result res = 1;
}

// 移除某个组成员
message GrpUserDelReq {
    int32 uid = 1;
    int32 gid = 2;
    int32 timestamp = 3;
}

message GrpUserDelRsp {
    Result res = 1;
}

// 退出某个组  /***暂时没有用到***/
message UserExitReq {
    int32 uid = 1;
    int32 gid = 2;
}

message UserExitRsp {
    Result res = 1;
}

// 获取群组列表
message GrpListReq {
    int32 uid = 1;
}

// 返回模糊查找以及目前用户所在的群组
message GroupListRsp {
    int32 uid = 1;
    repeated GroupInfo group_list = 2;
    Result res = 3;
}

message GrpSearchReq {
    int32 uid = 1;
    string target = 2;
}


message InviteUserReq {
    int32 gid = 1;
    string uids = 2;
}

message InviteUserResp {
    repeated DeviceInfo user_list = 1; // 群里的成员
    Result res = 2;
}

// App单独获取某个群组信息以及群成员等信息
message GetGroupInfoReq {
    int32 gid = 1;
    int32 uid = 2;
}

message GetGroupInfoResp {
    GroupInfo groupInfo = 1;
    Result res = 2;
}

// apk信息获取req
message apkInfoReq {
    int32 uid = 2;
}

// apk信息获取返回
message apkInfoResp {
    string apkVersion = 1;
    string apkPath = 2;
    Result res = 3;
}