/*
@Time : 2019/10/25 14:04 
@Author : yanKoo
@File : router
@Software: GoLand
@Description: 注册路由
*/
package runner

import (
	"flag"
	"github.com/gin-gonic/gin"
	"github.com/unrolled/secure"
	"net/http"
	_ "net/http/pprof"
	"strings"
	cfgWs "web-api/config"
	"web-api/controllers"
	_ "web-api/docs" // docs is generated by Swag CLI,
	"web-api/logger"
	"web-api/routers"
)

type runner struct {
	e *gin.Engine
}

// new web server runner
func NewWebServerRunner() *runner {
	return &runner{e: gin.New()}
}

// 运行web服务
func (r *runner) Run() {
	// 0. pprof
	/*go func() {
		_ = http.ListenAndServe(cfgWs.PprofAddr, nil)
	}()*/

	// 1. 启动内部调用的http服务
	go func() {
		if err := internalPrepare().Run(":" + "10001"); err != nil {
			logger.Debugf("listen is error %+v", err)
		}
	}()

	// 2. 添加中间件，注册路由，启动web https服务
	r.addMiddleWare().registerRouter().listen()
}

// 增加中间件
func (r *runner) addMiddleWare() *runner {
	r.e.Use(logger.Logger(), gin.Recovery(), cors())
	return r
}

// 注册路由
func (r *runner) registerRouter() *runner {
	routers.RegisterRouter(r.e)
	return r
}

// 运行服务启动监听
func (r *runner) listen() {
	if cfgWs.HttpWay == "https" {
		r.e.Use(tlsHandler())
		if err := r.e.RunTLS(":"+cfgWs.WebPort, cfgWs.CertFile, cfgWs.KeyFile); err != nil {
			logger.Debugf("Read pem key file error: %+v", err)
		}
	} else if cfgWs.HttpWay == "http" {
		if err := r.e.Run(":" + cfgWs.WebPort); err != nil {
			logger.Debugf("listen is error:%+v", err)
		}
	}
}

// 解决跨域
func cors() gin.HandlerFunc {
	return func(c *gin.Context) {
		method := c.Request.Method               //请求方法
		origin := c.Request.Header.Get("Origin") //请求头部
		var headerKeys []string                  // 声明请求头keys
		for k := range c.Request.Header {
			headerKeys = append(headerKeys, k)
		}
		headerStr := strings.Join(headerKeys, ",")
		if headerStr != "" {
			headerStr = "access-control-allow-origin, access-control-allow-headers, " + headerStr
		} else {
			headerStr = "access-control-allow-origin, access-control-allow-headers"
		}
		if origin != "" {
			c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
			c.Header("Access-Control-Allow-Origin", "*")                                       // 允许访问所有域
			c.Header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE,UPDATE") //服务器支持的所有跨域请求的方法,为了避免浏览次请求的多次'预检'请求
			//  header的类型
			c.Header("Access-Control-Allow-Headers", "Authorization, Content-Length, X-CSRF-Token, Token,session,X_Requested_With,Accept, Origin, Host, Connection, Accept-Encoding, Accept-Language,DNT, X-CustomHeader, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Pragma")
			//              允许跨域设置                                                                                                      可以返回其他子段
			c.Header("Access-Control-Expose-Headers", "Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers,Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,FooBar") // 跨域关键设置 让浏览器可以解析
			c.Header("Access-Control-Max-Age", "172800")                                                                                                                                                           // 缓存请求信息 单位为秒
			c.Header("Access-Control-Allow-Credentials", "false")                                                                                                                                                  //  跨域请求是否需要带cookie信息 默认设置为true
			c.Set("content-type", "application/json")                                                                                                                                                              // 设置返回格式是json
		}

		//放行所有OPTIONS方法
		if method == "OPTIONS" {
			c.JSON(http.StatusOK, "Options Request!")
		}
		// 处理请求
		c.Next() //  处理请求
	}
}

// https
func tlsHandler() gin.HandlerFunc {
	addr := flag.String("a", "localhost", "ssl 默认主机")
	flag.Parse()
	return func(c *gin.Context) {
		secureMiddleware := secure.New(secure.Options{
			SSLRedirect: true,
			SSLHost:     *addr + ":" + cfgWs.WebPort,
		})
		err := secureMiddleware.Process(c.Writer, c.Request)

		// If there was an error, do not continue.
		if err != nil {
			return
		}

		c.Next()
	}
}

// 内部调用服务
func internalPrepare() *gin.Engine {
	// 禁用控制台颜色
	gin.DisableConsoleColor()

	engine := gin.Default()

	// 日志， 解决跨域问题
	engine.Use(logger.Logger())

	// 切换的grpc的连接
	engine.GET("/internal/web-api/server/device/change", controllers.ChangeDispatcher)

	return engine
}
